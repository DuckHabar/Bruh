/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FeedbackForm } from "./FeedbackForm";
import { FeedbackFormCountArgs } from "./FeedbackFormCountArgs";
import { FeedbackFormFindManyArgs } from "./FeedbackFormFindManyArgs";
import { FeedbackFormFindUniqueArgs } from "./FeedbackFormFindUniqueArgs";
import { CreateFeedbackFormArgs } from "./CreateFeedbackFormArgs";
import { UpdateFeedbackFormArgs } from "./UpdateFeedbackFormArgs";
import { DeleteFeedbackFormArgs } from "./DeleteFeedbackFormArgs";
import { FeedbackFormService } from "../feedbackForm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FeedbackForm)
export class FeedbackFormResolverBase {
  constructor(
    protected readonly service: FeedbackFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "read",
    possession: "any",
  })
  async _feedbackFormsMeta(
    @graphql.Args() args: FeedbackFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FeedbackForm])
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "read",
    possession: "any",
  })
  async feedbackForms(
    @graphql.Args() args: FeedbackFormFindManyArgs
  ): Promise<FeedbackForm[]> {
    return this.service.feedbackForms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FeedbackForm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "read",
    possession: "own",
  })
  async feedbackForm(
    @graphql.Args() args: FeedbackFormFindUniqueArgs
  ): Promise<FeedbackForm | null> {
    const result = await this.service.feedbackForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackForm)
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "create",
    possession: "any",
  })
  async createFeedbackForm(
    @graphql.Args() args: CreateFeedbackFormArgs
  ): Promise<FeedbackForm> {
    return await this.service.createFeedbackForm({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackForm)
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "update",
    possession: "any",
  })
  async updateFeedbackForm(
    @graphql.Args() args: UpdateFeedbackFormArgs
  ): Promise<FeedbackForm | null> {
    try {
      return await this.service.updateFeedbackForm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeedbackForm)
  @nestAccessControl.UseRoles({
    resource: "FeedbackForm",
    action: "delete",
    possession: "any",
  })
  async deleteFeedbackForm(
    @graphql.Args() args: DeleteFeedbackFormArgs
  ): Promise<FeedbackForm | null> {
    try {
      return await this.service.deleteFeedbackForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
