/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FeedbackForm as PrismaFeedbackForm } from "@prisma/client";

export class FeedbackFormServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeedbackFormCountArgs, "select">
  ): Promise<number> {
    return this.prisma.feedbackForm.count(args);
  }

  async feedbackForms(
    args: Prisma.FeedbackFormFindManyArgs
  ): Promise<PrismaFeedbackForm[]> {
    return this.prisma.feedbackForm.findMany(args);
  }
  async feedbackForm(
    args: Prisma.FeedbackFormFindUniqueArgs
  ): Promise<PrismaFeedbackForm | null> {
    return this.prisma.feedbackForm.findUnique(args);
  }
  async createFeedbackForm(
    args: Prisma.FeedbackFormCreateArgs
  ): Promise<PrismaFeedbackForm> {
    return this.prisma.feedbackForm.create(args);
  }
  async updateFeedbackForm(
    args: Prisma.FeedbackFormUpdateArgs
  ): Promise<PrismaFeedbackForm> {
    return this.prisma.feedbackForm.update(args);
  }
  async deleteFeedbackForm(
    args: Prisma.FeedbackFormDeleteArgs
  ): Promise<PrismaFeedbackForm> {
    return this.prisma.feedbackForm.delete(args);
  }
}
